package com.jumia.controllers;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.jumia.entities.Customer;
import com.jumia.services.CustomerService;

@RunWith(SpringRunner.class)
@SpringBootTest()
@AutoConfigureMockMvc
public class CustomerControllerTest {
  @Autowired
  private MockMvc mockMvc;

  @MockBean
  CustomerService customerService;

  @Test
  public void testFindAll() throws Exception {

    // given
    Customer customer1 = new Customer("(212) 698054317", "John(258) 823747618");
    Customer customer2 = new Customer("(258) 8237476181", "Chou");
    List<Customer> customers = Arrays.asList(customer1, customer2);

    when(customerService.findAll()).thenReturn(customers);

    MvcResult result = mockMvc.perform(get("/customer/")).andExpect(status().isOk()).andReturn();
    ObjectMapper mapper = new ObjectMapper();

    // this uses a TypeReference to inform Jackson about the Lists's generic
    // type
    List<Customer> actual = mapper.readValue(result.getResponse().getContentAsString(), new TypeReference<List<Customer>>() {});

//    Response searchResponse = given().get("/customer/");
//    // then
//    searchResponse.then().assertThat().body("", hasSize(2));
//    Customer returnedCustomer1 = searchResponse.as(Customer[].class)[0];
//
//    assertThat(returnedCustomer1.getCountry()).isEqualTo(CountryCode.MOROCCO.name().toLowerCase());
//    assertTrue(returnedCustomer1.isValid());
//
//    Customer returnedCustomer2 = searchResponse.as(Customer[].class)[1];
//    assertThat(returnedCustomer2.getCountry()).isEqualTo(CountryCode.MOZAMBIQUE.name().toLowerCase());
//    assertFalse(returnedCustomer2.isValid());

  }
}
