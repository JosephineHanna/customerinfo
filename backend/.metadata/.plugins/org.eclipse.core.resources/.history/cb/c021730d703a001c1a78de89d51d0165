package com.jumia.controllers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jumia.entities.Customer;
import com.jumia.services.impl.CustomerServiceImpl;

@RunWith(SpringRunner.class)
@SpringBootTest()
@AutoConfigureMockMvc
public class CustomerControllerTest {
  @Autowired
  private MockMvc mockMvc;

  @MockBean
  CustomerServiceImpl customerService;

  @Test
  public void testFindAll() throws Exception {

    // prepare
    Customer customer1 = new Customer("(212) 698054317", "Yosaf Karrouch", "Morocco", true);
    Customer customer2 = new Customer("(258) 8237476181", "Chou", "Mozambique", false);
    List<Customer> customers = Arrays.asList(customer1, customer2);

    // when
    when(customerService.findAll()).thenReturn(customers);

    // Test
    MvcResult result = mockMvc.perform(get("/customer/")).andExpect(status().isOk()).andReturn();
    ObjectMapper mapper = new ObjectMapper();

    // Assertions
    List<Customer> returnedCustomers = mapper.readValue(result.getResponse().getContentAsString(), new TypeReference<List<Customer>>() {});

    Customer returnedCustomer1 = returnedCustomers.get(0);

    assertThat(returnedCustomer1.getName()).isEqualTo("Yosaf Karrouch");

    Customer returnedCustomer2 = returnedCustomers.get(1);
    assertThat(returnedCustomer2.getPhone()).isEqualTo("(258) 8237476181");

  }
}
